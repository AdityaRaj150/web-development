CSS GRID

grid-template-rows: 1fr 2fr <!--this sets two rows in 1:2 ratio-->
grid-template-columns: 1fr 3fr <!--this sets two columns in 1:3 ratio-->

grid-template: 100px 20px / 2fr 3fr  <!--first part is setting rows and after forward slash, it's columns-->
remember by report card {RC} rows and columns

grid-template-columns: 100px auto; makes it a responsive
it means the box column will be of 100px and the second one will be take up remaining space on the screen.

grid-template-rows: 100px auto; 
means that first row will be of 100px and second row will only be of that much height which is required to fit it'sc8ontent.

grid-template-columns: 100px minmax(200px,400px) means that first column is of 100px whereas max width of second column if allowed
will be 400px and min width to which it will shrink can be 200px

grid-template-rows: repeat(8, 100px) is alternative way of doing grid-template-rows: 100px 100px 100px 100px 100px 100px 100px 100px ;

**when you have extra div which doesn't fit in the provided columns and rows, they will automatically be sized so that they are sized just enough
to fit their content.
to customize the size of the extra div , use-
grid-auto-rows: 100px;

grid-column: span 2 - this makes the div occupy two consecutive columns 
it actually consists of two codes- grid-column-start: span 2;
                                   grid-column-end: auto;

you can also also choose whichever the columns you want to a certain div to occupy like this-
  grid-column-start: 2;
  grid-column-end: 4;

also you want to the div to occupy complete first row and you don't how many rows are there, you do it like this-
    grid-column-start: 1;
    grid-column-end: -1;

use chrome developer tools to see grid number from front as well as from back.

*similarly, you can do all this for rows as well using 
    grid-row: span 2;
    or grid-row-start: span 2;
       grid-row-end: auto;

similarly you want to target a specific box, to be completely specific write code like this-

grid-column-start: 2;
grid-column-end: 4;
grid-row-start: 3;
grid-row-end: -1;

alternatively, you can also write it like this-
    grid-area: 3 / 2 / -1 / 4


Also just like flexbox, use of ORDER is similar.
by the relative use of order, you can position the divs.


note: after 6 digit hexcodes of colour the digits specify the visibility of the colour;
for example : #E5833180 here 80 means 50% visibility!!